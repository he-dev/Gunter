using System;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Web.UI.WebControls;
using Gunter.Data;
using Gunter.Extensions;
using Gunter.Reporting;
using Gunter.Reporting.Modules;
using Gunter.Services;
using Reusable.Markup;
using Reusable.Markup.Html;

namespace Gunter.Messaging.Email.ModuleRenderers
{
    [CanRender(typeof(Signature))]
    public class SignatureRenderer : ModuleRenderer
    {
        public override string Render(IModule module, TestUnit testUnit, IServiceProvider serviceProvider)
        {
            var styleVisitor = serviceProvider.GetService<StyleVisitor>();
            var variables = serviceProvider.GetService<IVariableResolver>();

            var autoGeneratedBy =
                Html
                    .Element("p", p => p
                        .Class("auto-generated-by")
                        .Append("Auto-generated by ")
                        .Element("span", span => span
                            .Class("app-name")
                            .Append(variables.Resolve("{Workspace.AppName}")))
                        .Append($" {DateTime.UtcNow.ToString(CultureInfo.InvariantCulture)} (UTC)"))
                    .ToHtml(MarkupFormatting.Empty, new[] { styleVisitor });

            return autoGeneratedBy;

            //.AppendLine(Html.Element("hr", string.Empty).Style(Styles[Style.HorizonalRule]).ToHtml(MarkupFormatting.Empty, Enumerable.Empty<IMarkupVisitor>()))
        }
    }
}