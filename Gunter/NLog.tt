<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.configuration" #>
<#@ assembly name="$(ProjectDir)\$(OutDir)\Reusable.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Reusable.Data.SqlClient" #>
<#@ include file="NLog.config.tt" #>
<#@ output extension=".config" #>
<?xml version="1.0" encoding="utf-8" ?>
<#
	
	var defaultColumns = new [] { "Id", "Timestamp", "Environment", "LogLevel", "Logger", "ThreadId", "Message", "Exception" };
	var indentWidth = 3;
	var idColumn = "Id";
#>
<nlog
  xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  internalLogFile="<#=internalLogFile#>"
  internalLogLevel="Error">

  <!-- *** Do not modify this file. It is autogenerated (<#= DateTime.UtcNow.ToString() #> (UTC)) *** -->

  <!-- sub-templates -->

  <variable name="environmentNotAvailable" value="N/A" />
  <variable name="environmentLayout" value="${whenEmpty:whenEmpty=${environmentNotAvailable}:inner=${event-context:item=Environment}}" />

  <variable name="callsiteLayout" value="${callsite:className=true:fileName=true:methodName:true}" />
  <variable name="exceptionLayout" value="${exception:format=tostring:separator= | :innerFormat=tostring,message:maxInnerExceptionLevel=7:innerExceptionSeparator= | }" />
  <variable name="stackTraceLayout" value="${stacktrace:format=raw:topFrames=7:separator= » }" />

  <!-- full templates -->  

  <variable name="debuggerLayout" value="DEBUG » ${level:uppercase=true} | ${message}${onexception:${newline}${exceptionLayout}}" />

  <#
	var tables = new SqlServer().GetTables(connectionString, database, schema).Where(t => Regex.IsMatch(t.TableName, tablePattern, RegexOptions.IgnoreCase)).ToList();
  #>
  <targets>    

    <target xsi:type="Debugger" name="debugger" layout="${debuggerLayout}" />

<#
foreach(var table in tables)
{
	var columns = new SqlServer().GetColumns(connectionString, schema, table.TableName);
#>	
		<target xsi:type="Database" name="<#=table.TableName#>" dbProvider="System.Data.SqlClient" connectionString="<#=connectionString#>">
			<commandText>
				INSERT INTO [<#=schema#>].[<#=table.TableName#>] (
<#
foreach(var column in columns.Where(c => !c.ColumnName.Equals(idColumn, StringComparison.OrdinalIgnoreCase)).Select((x, i) => new { x, i }))
{
	PushIndent(CreateIndent(indentWidth, 4));
	Write("[" + column.x.ColumnName + "]");
	WriteLine(column.i < columns.Count - 2 ? "," : string.Empty);
	PopIndent();
}
#>
				) VALUES (
<#
foreach(var column in columns.Where(c => !c.ColumnName.Equals(idColumn, StringComparison.OrdinalIgnoreCase)).Select((x, i) => new { x, i }))
{
	PushIndent(CreateIndent(indentWidth, 4));
	Write(column.x.IsNullable == "YES" ? "NULLIF(@" + column.x.ColumnName + ", '')" : "@" +  column.x.ColumnName);	
	WriteLine(column.i < columns.Count - 2 ? "," : string.Empty);
	PopIndent();
}
#>
				)
			</commandText>
			
			<!-- Default columns for each log. -->
			<parameter name="@Timestamp" layout="${longdate:universalTime=true}" />
			<parameter name="@Environment" layout="${environmentLayout}" />
			<parameter name="@LogLevel" layout="${level:uppercase=true}" />
			<parameter name="@Logger" layout="${logger}" />
			<parameter name="@ThreadId" layout="${ThreadId}" />
			<parameter name="@Message" layout="${Message}" />
			<parameter name="@Exception" layout="${onexception:${exceptionLayout}}" />

			<!-- Custom columns. -->
<#

foreach(var column in columns.Where(c => !defaultColumns.Contains(c.ColumnName, StringComparer.OrdinalIgnoreCase)))
{
#>
			<parameter name="@<#=column.ColumnName#>" layout="${<# Write(column.DataType == "float" ? "invariant" : "event");#>-properties:item=<#=column.ColumnName#>}" />
<#
}
#>
		</target>
<#
	}
#>

    <target xsi:type="Console" name="Console" layout="${debuggerLayout}" encoding="utf-8" />

  </targets>

  <rules>

    <!-- Log everything to debugger -->
    <logger name="*" minlevel="Trace" writeTo="debugger" enabled="true" final="false" />

    <logger name="*" minlevel="Trace" writeTo="Console" enabled="true" />

<#
foreach(var table in tables.Where(t => !Regex.IsMatch(t.TableName, mainLogPattern, RegexOptions.IgnoreCase)))
{
#>
    <logger name="<#=table.TableName#>" appendTo="<#=table.TableName#>" minlevel="Debug" enabled="true" final="true" />
<#
}
#>   
<#
var mainLog = tables.SingleOrDefault(t => Regex.IsMatch(t.TableName, mainLogPattern, RegexOptions.IgnoreCase));
if (mainLog != null)
{
#>
    <!-- Use the MainLog if no other log matches. -->
    <logger name="*" appendTo="<#=mainLog.TableName#>" minlevel="Debug" enabled="true" final="true" />
<#
}
#>

  </rules>
</nlog>

<#+
private string CreateIndent(int width, int depth)
{
	return new string(' ', width * depth);
}
#>